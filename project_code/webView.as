package  {		import flash.display.MovieClip;	import flash.media.StageWebView;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.ServerSocketConnectEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net .Socket;	import flash.net.ServerSocket;	import flash.net.Socket;	import flash.geom.Rectangle;	import flash.utils.setTimeout;	import flash.utils.ByteArray;	import mx.collections.ArrayCollection;	//video	import be.boulevart.google.events.GoogleApiEvent;	import be.boulevart.google.ajaxapi.search.GoogleSearchResult;	import be.boulevart.google.ajaxapi.search.videos.GoogleVideoSearch;	import be.boulevart.google.ajaxapi.search.videos.data.GoogleVideo;		public class webView extends MovieClip {		//webview		private var sw:StageWebView;				//socketserver		private var server :ServerSocket = new ServerSocket();//新增socket server		private var serverActivity:Boolean = false;//socket server是否啟動中		private var clientSockets:ArrayCollection = new ArrayCollection();//存放連進來的client端		private var ipAddress:String = "127.0.0.1";//socket server IP		private var ipAddressPort:int = 9527;//socket server Port		private var str:String;//收到socket client的字串		private var array:Array;//依逗號分開放在array		private var getItem:int;				//video		private var videoSearch:GoogleVideoSearch;		private var videoResult:GoogleSearchResult;				public function webView() {			this.addEventListener(Event.ADDED_TO_STAGE,initWebview);		}		public function initWebview(e:Event=null):void{			initSocket();			trace('create web');			sw=new StageWebView();			sw.stage = stage;			sw.viewPort = new Rectangle(0,0,stage.stageWidth,stage.stageHeight);			sw.addEventListener(ErrorEvent.ERROR,onwebError);			sw.addEventListener(Event.COMPLETE,onwebComplete);			sw.loadURL("http://www.google.com.tw");					}				private function goURL(url:String):void{			sw.loadURL(url);					}		private function onwebError(e:ErrorEvent):void{					}		private function onwebComplete(e:Event):void{					}				//按下Connect button call function		private function initSocket():void{			createSocket();		}		//創造socket server		private function createSocket():void		{			try			{				server.bind(ipAddressPort, ipAddress);//連線!!!				//config_socketData.text= 'socket server created!';				server.addEventListener(ServerSocketConnectEvent.CONNECT , clientConnectedHandler);//client連線的偵聽				server.listen();//socket server 偵聽中				serverActivity = true;//啟動設成true				//config_socket.color=0x00FF00;						}			catch (err:Error)//如果有錯 			{				//config_socketData.text= 'socket error auto retrying';				serverActivity = false;				//config_socket.color=0xFF0000;							setTimeout(function (){						   initSocket();						   },5000);			}		}		//每當有新的 Client 連該進來, 就會觸發該函式。		private function clientConnectedHandler(e:ServerSocketConnectEvent):void		{						var clientSocket:Socket = e.socket;			//config_socketData.text= 'socket data: new client come in!';			clientSockets.addItem( clientSocket );			clientSocket.addEventListener(Event.CLOSE , clientDisconnectedHandler);			//偵聽當 Client 離線時。;			clientSocket.addEventListener(ProgressEvent.SOCKET_DATA, onClientSocketData );		}				// 讀取 Client 發出的訊息		private function onClientSocketData(e:ProgressEvent):void		{			var buffer:ByteArray = new ByteArray();			var clientSocket:Socket = e.currentTarget as Socket;			clientSocket.readBytes( buffer, 0, clientSocket.bytesAvailable );			txt.text= 'socket get : ' + buffer.toString() ;						str=buffer.toString();			writeDataToSockets(str);			array = str.split(":");			if(buffer.toString()=='fall,'){				//createCircle();			}			var web:String;			switch(array[0]){				case 'Facebook':					web='https://www.facebook.com/search/results.php?q=';					break;				case 'Google':					web='https://www.google.com/search?q=';					break;				case 'Twitter':					web='https://twitter.com/search?q=';					break;				case 'Flickr':					web='http://www.flickr.com/search/?q=';					break;				case 'Wikipedia':					web='http://wikipedia.org/wiki/';					break;				case 'News':					web='https://www.google.com/search?tbm=nws&q=';					break;				case 'Youtube':					//web='https://www.youtube.com/results?q=';					initVideo()					break;				case 'Reddit':					goURL('http://www.reddit.com/');					break;				case 'four chan':					goURL('http://boards.4chan.org/b/');					break;			}			if(array[0]!='Reddit' && array[0]!='4Chan' && array[0]!='Youtube'){				goURL(String(web+array[1]));			}		}				// 當 Client 離線時。		private function clientDisconnectedHandler(e:Event):void		{			e.currentTarget.removeEventListener( e.type , arguments.callee );			getItem=clientSockets.getItemIndex(e.target)			clientSockets.removeItemAt( getItem);		}				// 對所有的 Client 發出訊息。		private function writeDataToSockets(msg:String):void		{			//config_socketData.text= 'socket send: '+msg;			//so_get.play();									//var msg:String = 'test';//textInput.text;			if (msg == "")			{				return;			}						for each (var socket:Socket in clientSockets)			{				if (socket.connected)				{					try					{						socket.writeUTF(msg);						socket.flush();					}					catch (err:Error)					{						//config_socketData.text= 'socket error: '+err;					}				}			}		}		//程式關掉時		private function appCloseHandler():void		{			server.close();			server = null;		}				// video		private function initVideo():void{			videoSearch=new GoogleVideoSearch();			videoSearch.addEventListener(GoogleApiEvent.VIDEO_SEARCH_RESULT,onvideoResult);			videoSearch.search(array[1]);					}				private function onvideoResult(e:GoogleApiEvent):void{			videoSearch.removeEventListener(GoogleApiEvent.VIDEO_SEARCH_RESULT,onvideoResult);			videoResult=e.data as GoogleSearchResult;			for each(var result:GoogleVideo in videoResult.results){				goURL(result.playUrl);				break;			}		}	}	}